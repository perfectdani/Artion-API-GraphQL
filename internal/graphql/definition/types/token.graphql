# Token represents item, which can be listed or offered in the marketplace.
type Token {
    # Address of the token contract
    contract: Address!

    # ID of the token (in given token contract)
    tokenId: BigInt!

    # Name of the token
    name: String!

    # Description of the token
    description: String!

    # Symbol of the token
    symbol: String!

    # URL of IP document
    ipRights: String!

    # URL of the token image (IPFS-HTTP proxy for IPFS uris)
    image: String

    # URL of the resized token image (on the API server)
    imageThumb: String

    # MIME type of the token image
    imageMimetype: String

    # Time when was the token created on chain.
    created: Time!

    # Fee for token minter in percents of trade with 2 decimals
    royalty: Int

    # Recipient of the royalty fee (typically token minter)
    feeRecipient: Address

    # Recipient of the royalty fee (typically token minter)
    feeRecipientUser: User

    # Whether is the item listed for sale. (Buy now)
    hasListing: Boolean!

    # Whether has the item some offers to sell.
    hasOffer: Boolean!

    # Whether has the item some running auction.
    hasAuction: Boolean!

    # Planned end of the auction.
    hasAuctionUntil: Time

    # Whether has the item some running auction and at least one bid on it.
    hasBids: Boolean!

    # Last listing creation time.
    lastListing: Time

    # Last trade (transfer) time.
    lastTrade: Time

    # Last offer creation time.
    lastOffer: Time

    # Last auction bid time.
    lastBid: Time

    # Listed price - price for Buy now
    listingPrice: TokenPrice

    # Auctioned price - the last bid amount
    auctionedPrice: TokenPrice

    # Reserve price of running auction
    auctionReservePrice: TokenPrice

    # Offered price for selling the token
    offeredPrice: TokenPrice

    # Price of the last trade (finished auction/listing/offer)
    lastTradePrice: TokenPrice

    # How much times was the token viewed. (cached value)
    views: BigInt!

    # How much users likes this token. (cached value)
    likes: BigInt!

    # How much times was the token viewed. (from shared db)
    exactViews: BigInt!

    # How much users likes this token. (from shared db)
    exactLikes: BigInt!

    # Is the token liked by logged user?
    isLiked: Boolean!

    # Is the token liked by given user?
    isLikedBy(user: Address): Boolean!

    # Has the token an unlockable content?
    hasUnlockable: Boolean!

    # Collection (token contract) of the token
    collection: Collection

    # List owners of the token and their token balances
    ownerships(first: Int, after: Cursor, last: Int, before: Cursor): OwnershipConnection!

    # Past activities on the token (listing created, auction bid, etc.)
    activities(filter: ActivityFilter, first: Int, after: Cursor, last: Int, before: Cursor): ActivityConnection!

    # Current listings of the token
    listings(first: Int, after: Cursor, last: Int, before: Cursor): ListingConnection!

    # Current offers of the token
    offers(first: Int, after: Cursor, last: Int, before: Cursor): OfferConnection!

    # Currently running or last finished auction of the token
    auction: Auction

    # Price history of the token aggregated from trades (aggregated by days)
    priceHistory(from: Time!, to: Time!): [PriceHistory!]!

    # General-purpose price of the token in USD used for filtering/sorting - for debugging only
    usdPrice: String!
}

# TokenPrice represents price of a token.
type TokenPrice {
    # Price in amount of smallest bits of an ERC-20 token
    amount: BigInt!

    # The ERC-20 token used as the price currency.
    payToken: Address!

    # amount in USD used for filtering/sorting - for debugging only
    usdPrice: String!
}

type TokenEdge {
    cursor: Cursor!
    node: Token!
}

type TokenConnection {
    # Edges contains provided edges of the sequential list.
    edges: [TokenEdge!]!

    # TotalCount is the total amount of items in the list - SLOW! query only when needed!
    totalCount: BigInt!

    # PageInfo is an information about the current page of the list.
    pageInfo: PageInfo!
}

# TokenSorting defines order of a tokens list
enum TokenSorting {
    # Recently Created / Oldest
    CREATED
    # Recently Listed
    LAST_LISTING
    # Recently Sold
    LAST_TRADE
    # Ending Soon
    AUCTION_UNTIL
    # Most Expensive / Cheapest
    PRICE
    # Highest Last Sale
    LAST_TRADE_AMOUNT
    # Mostly Viewed
    VIEWS
    # Mostly Liked
    LIKES
}

# TokenFilter defines filter which can be used to filter a tokens list
input TokenFilter {
    # search tokens by name
    search: String

    # filter tokens with listing (buy now)
    hasListing: Boolean

    # filter tokens with auction
    hasAuction: Boolean

    # filter tokens with at least one offer
    hasOffer: Boolean

    # filter tokens with auction and at least one bid
    hasBids: Boolean

    # include inactive tokens?
    includeInactive: Boolean

    # filter tokens by collections
    collections: [Address!]

    # filter tokens by category id
    categories: [Int!]

    # filter tokens created by user
    createdBy: Address

    # minimal token price in USD to 6 decimals fixed point
    priceMin: BigInt

    # maximal token price in USD to 6 decimals fixed point
    priceMax: BigInt
}
