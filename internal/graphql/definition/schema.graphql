# Root schema definition
schema {
    query: Query
    mutation: Mutation
}

# Entry points for querying the API
type Query {
    # version represents the API server version responding to your requests.
    version: String!

    collection(contract: Address!): Collection!

    collections(first: Int, after: Cursor, last: Int, before: Cursor): CollectionConnection!

    token(contract: Address!, tokenId: BigInt!): Token!

    tokens(filter: TokenFilter, sortBy: TokenSorting, sortDir: SortingDirection, first: Int, after: Cursor, last: Int, before: Cursor): TokenConnection!

    listings(first: Int, after: Cursor, last: Int, before: Cursor): ListingConnection!

    offers(first: Int, after: Cursor, last: Int, before: Cursor): OfferConnection!

    user(address: Address!): User!

    loggedUser: User

    loggedUserTokenLikes(first: Int, after: Cursor, last: Int, before: Cursor): TokenLikeConnection!

}

# Mutation endpoints for modifying the data
type Mutation {

    # Generate login challenge to be signed by private key and used to log-in
    initiateLogin: String!

    # Use private key signed login challenge to get bearer token.
    login(user: Address!, challenge: String!, signature: String!): String!

    # Update user profile
    updateUser(username: String!, bio: String!, email: String!, avatar: String!): Boolean!

    # Set token as liked (add into favourites)
    likeToken(contract: Address!, tokenId: BigInt!): Boolean!

    # Unset token as liked (remove from favourites)
    unlikeToken(contract: Address!, tokenId: BigInt!): Boolean!

}
